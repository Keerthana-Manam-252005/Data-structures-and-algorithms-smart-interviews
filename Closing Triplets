Closing Triplets: 

Given three arrays A, B, and C, choose a triplet a, b, c such that a, b, and c belong to the arrays A, B, and C respectively, such that the absolute difference between the maximum and minimum element of the chosen triplet is minimized, i.e., minimize |max(a,b,c)-min(a,b,c)|.

Input Format
The first line of input contains T - the number of test cases. It is followed by 6T lines, the first line contains N1 - the size of the array A and the second line contains the elements of the array A. The third line contains N2 - the size of the array B and the fourth line contains the elements of the array B. The fifth line contains N3 - the size of the array C and the sixth line contains the array C elements.

Output Format
For each test case, print the minimum absolute difference, separated by a newline.

Constraints
10 points
1 <= T <= 100
1 <= N1, N2, N3 <= 100
0 <= A[i], B[i], C[i] <= 109

30 points
1 <= T <= 100
1 <= N1 ,N2, N3 <= 500
0 <= A[i], B[i], C[i] <= 109

60 points
1 <= T <= 100
1 <= N1, N2, N3 <= 10000
0 <= A[i], B[i], C[i] <= 109

Example
Input
1
5
10 8 5 4 1
3
6 9 15
4
8 3 2 6

Output
1

Explanation

Example 1: The triplet (5,6,6) belongs to the arrays A, B, and C respectively and it gives |max(a,b,c)-min(a,b,c)| = 1.

code:
def closing_triplets(a,b,c):
    a.sort()
    b.sort()
    c.sort()
    i,j,k=0,0,0
    diff=float('inf')
    while i<len(a) and j<len(b) and k<len(c):
        c_max=max(a[i],b[j],c[k])
        c_min=min(a[i],b[j],c[k])
        diff=min(diff,c_max-c_min)
        if c_min==a[i]:
            i+=1
        elif c_min==b[j]:
            j+=1
        else:
            k+=1
    return diff
t=int(input())
for _ in range(t):
    n1=int(input())
    a=list(map(int,input().split()))
    n2=int(input())
    b=list(map(int,input().split()))
    n3=int(input())
    c=list(map(int,input().split()))
    ans=closing_triplets(a,b,c)
    print(ans)
