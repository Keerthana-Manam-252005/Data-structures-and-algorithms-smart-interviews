Finding CubeRoot:

Find the cube root of the given number. Assume that all the input test cases will be a perfect cube.

Note: Do not use any inbuilt functions / libraries for your main logic.  Input Format
The first line of input contains T - the number of test cases. It is followed by T lines, each containing a single integer.

Output Format
For each test case, print the cube root of the number, separated by a new line.

Constraints
30 points
1 <= T <= 103
-109 <= N <= 109

70 points
1 <= T <= 106
-1018 <= N <= 1018

Example
Input
5
-27
-125
1000
6859
-19683

Output
-3
-5
10
19
-27

code:
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        int T=s.nextInt();
        for(int t = 0;t < T;t++){
            HashMap<Integer,Integer> hm=new HashMap<>();
            int n=s.nextInt();
            int k=s.nextInt();
            int[] ar=new int[n];
            for(int a = 0;a < n;a++){
                ar[a]=s.nextInt();
            }
            for(int i=0;i<k;i++){
                hm.put(ar[i],hm.getOrDefault(ar[i],0)+1);
            }
            System.out.print(hm.size()+" ");
            for(int j=k;j<n;j++){
                if(hm.get(ar[j-k])==1){
                    hm.remove(ar[j-k]);
                }
                else{
                    hm.put(ar[j-k],hm.get(ar[j-k])-1);
                }
                hm.put(ar[j],hm.getOrDefault(ar[j],0)+1);
                System.out.print(hm.size()+" ");
            }
            System.out.println();
        }
        s.close();
    }
}
