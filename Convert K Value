Convert K Value:

Given an array of size N and an integer K, you can apply the following operation on the number K.

Pick any element, say ar[i], from the given array and decrease the value of K by ar[i]. Moreover the array element value is halved i.e. ar[i] = floor(ar[i] / 2).

Find the minimum number of operations needed to convert K to a non-positive number. If it cannot be converted, simply print -1.

Input Format
The first line of input contains T - number of test cases. It is followed by 2T lines. The first line of each test case contains N - size of the array and K. The second line contains N integers - elements of the array.

Output Format
For each test case, print the minimum number of operations required to convert K to a non-positive number, or print -1 if it's not possible, separated by newline.

Constraints
30 points
1 <= T <= 100
1 <= N <= 103
1 <= ar[i] <= 104
1 <= K <= 105

70 points
1 <= T <= 104
1 <= N <= 104
1 <= ar[i] <= 105
1 <= K <= 107

Example
Input
3
4 100
1 2 4 8
5 20
6 7 4 10 5
3 2
1 2 4

Output
-1
3
1

Explanation

Test Case-1:
We cannot convert the value K to a non-positive with the given array elements.

Test Case-2:
In the 1st operation, we choose ar[3]. Now K becomes 20 - 10 = 10 and ar[3] becomes: 10 / 2 = 5.
In the 2nd operation, we choose ar[1] and K becomes 10 - 7 = 3 and ar[1] becomes: 7 / 2 = 3.
In the 3rd operation, we choose ar[0] and K becomes 3 - 6 = -3.


code:
import heapq
def convert_k(n,ar,k):
    maxheap=[]
    for i in ar:
        heapq.heappush(maxheap,-i)
    cnt = 0
    while k>0 and maxheap:
        max_val = -heapq.heappop(maxheap)
        k-=max_val
        cnt+=1
        reduced=max_val//2
        if reduced>0:
            heapq.heappush(maxheap,-reduced)
    return cnt if k<=0 else -1
t=int(input())
for _ in range(t):
    n,k=list(map(int,input().split()))
    ar=list(map(int,input().split()))
    print(convert_k(n,ar,k))
