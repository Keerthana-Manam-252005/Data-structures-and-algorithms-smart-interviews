Finding the Floor:

Given an array, you have to find the floor of a number x. The floor of a number x is nothing but the largest number in the array less than or equal to x.

Input Format
The first line of input contains the N - the size of the array. The next line contains N integers, the elements of the array. The next line contains Q - number of queries. Each of the next Q lines contains a single integer X, for which you have to find the floor of X in the given array.

Output Format
For each query, print the floor of X, separated by a new line. If the floor is not found, print the value of "INT_MIN".

Constraints
30 points
1 <= N <= 105
1 <= Q <= 102
-108 <= ar[i] <= 108

70 points
1 <= N <= 105
1 <= Q <= 105
-108 <= ar[i] <= 108

Example
Input
6
-6 10 -1 20 15 5
5
-1
10
8
-10
-4

Output
-1
10
5
-2147483648
-6

code:
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        int T=s.nextInt();
        for(int t = 0;t < T;t++){
            HashMap<Integer,Integer> hm=new HashMap<>();
            int n=s.nextInt();
            int k=s.nextInt();
            int[] ar=new int[n];
            for(int a = 0;a < n;a++){
                ar[a]=s.nextInt();
            }
            for(int i=0;i<k;i++){
                hm.put(ar[i],hm.getOrDefault(ar[i],0)+1);
            }
            System.out.print(hm.size()+" ");
            for(int j=k;j<n;j++){
                if(hm.get(ar[j-k])==1){
                    hm.remove(ar[j-k]);
                }
                else{
                    hm.put(ar[j-k],hm.get(ar[j-k])-1);
                }
                hm.put(ar[j],hm.getOrDefault(ar[j],0)+1);
                System.out.print(hm.size()+" ");
            }
            System.out.println();
        }
        s.close();
    }
}
