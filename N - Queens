N - Queens:

The N-queens puzzle involves placing N queens on an N x N chessboard such that no two queens can attack each other. Given an integer N, display all the unique solutions. Each solution should represent a distinct board configuration with '1' indicating a queen and '0' indicating an empty space.

Input Format
The first line of input contains T - the number of test cases. It is followed by T lines, each line contains N.

Output Format
For each test case, print the distinct solutions in lexicographical reverse order, separated by an empty line. If there is no solution for a given test case, print -1.

Constraints
1 <= T <= 10
1 <= N <= 10

Example
Input
3
4
2
1

Output
0100
0001
1000
0010

0010
1000
0001
0100

-1

1

Explanation

Test Case 1:
There are 2 distinct solutions:
Solution-1
0 Q 0 0
0 0 0 Q
Q 0 0 0
0 0 Q 0

Solution-2
0 0 Q 0
Q 0 0 0
0 0 0 Q
0 Q 0 0

Test Case 2:
There are no valid solutions when N = 2.

Test Case 3:
There is only one cell to place queen when N = 1. So, the number of distinct solutions is 1.

code:
def NQueens(n):
    ans=[]
    def backtrack(row,col,d1,d2,board):
        if row==n:
            ans.append([''.join(b) for b in board])
            return
        for i in range(n):
            if i in col or (row-i) in d1 or (row+i) in d2:
                continue
            board[row][i]='1'
            backtrack(
                row+1,
                col | {i},
                d1 | {row-i},
                d2 | {row+i},
                board
            )
            board[row][i]='0'
    board=[['0']*n for _ in range(n)]
    backtrack(0,set(),set(),set(),board)
    return sorted(ans,reverse=True)
t=int(input())
for _ in range(t):
    n=int(input())
    sol=NQueens(n)
    if not sol:
        print(-1)
    else:
        for i in sol:
            for j in i:
                print(j)
            print()
