Anytime Median:

Given an integer array, print the median for the sub-array 0 to i, for every i, 0 <= i <= N-1.

Input Format
The first line of input contains T - the number of test cases. It's followed by 2T lines - the first line contains N - the size of the array. The second line contains N integers - the elements of the array.

Output Format
For each test case, print the median for the sub-array 0 to i, for every i, separated by space. Print a new line between the output of different test cases. Note that in the case of even length sub-array, print the smaller element as the median.

Constraints
30 points
1 <= T <= 100
1 <= N <= 103

70 points
1 <= T <= 100
1 <= N <= 104

General Constraints
-104 <= A[i] <= 104

Example
Input
2
5
-10 14 11 -5 7 
3
2 -5 14 

Output
-10 -10 11 -5 7 
2 -5 2 


code:
import heapq
def median(a):
    min_heap=[]
    max_heap=[]
    heapq.heappush(max_heap,-a[0])
    print(-max_heap[0],end=' ')
    for i in range(1,n):
        if a[i]<-max_heap[0]:
            heapq.heappush(max_heap,-a[i])
            if len(max_heap)-len(min_heap)>1:
                heapq.heappush(min_heap,-heapq.heappop(max_heap))
        else:
            heapq.heappush(min_heap,a[i])
            if len(min_heap)>len(max_heap):
                heapq.heappush(max_heap,-heapq.heappop(min_heap))
        print(-max_heap[0],end=' ')
    print()
t=int(input())
for _ in range(t):
    n=int(input())
    a=list(map(int,input().split()))
    median(a)
