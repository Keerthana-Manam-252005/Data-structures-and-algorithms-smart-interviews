Smart Square:

Consider matrix of size 3x3. A matrix is said to be a smart matrix, if it consists of distinct numbers from 1 to 9 and the sum of every row, column and diagonal is divisible by 5. Given a matrix, find the minimum cost of converting it to a smart square by changing zero or more of its cells. We can convert any number a to b in the range of [1,9] at cost |a-b|.

Input Format
The first line of input contains T - the number of test cases. It's followed by 3T lines. Each test case contains a 3x3 matrix with distinct numbers from 1 to 9.

Output Format
For each test case, print the minimum cost to convert the matrix into a smart square, separated by a new line.

Constraints
1 <= T <= 105

Example
Input
3
4 9 2
3 5 7
6 8 1
8 6 1
3 5 2
4 9 7
1 4 6
3 5 9
2 7 6

Output
4
0
10

Explanation

Test Case 1
We can convert the given matrix to the following smart square which gives a minimum cost of 4.
4 9 2
3 5 7
8 6 1

Test Case 2
The given matrix is already a smart matrix.

Test Case 3
We can convert the given matrix to the following smart matrix which gives a minimum cost of 10.
1 2 7
6 5 9
3 8 4

code:
def is_smart(a,b,c):
    return (a+b+c)%5==0
def is_smart_square(arr):
    return is_smart(arr[0],arr[1],arr[2]) and is_smart(arr[3],arr[4],arr[5]) and is_smart(arr[6],arr[7],arr[8]) and is_smart(arr[0],arr[3],arr[6]) and is_smart(arr[1],arr[4],arr[7]) and is_smart(arr[2],arr[5],arr[8]) and is_smart(arr[0],arr[4],arr[8]) and is_smart(arr[2],arr[4],arr[6])
def compute_cost(arr,target):
    cost=0
    for i in range(9):
        cost+=abs(arr[i]-target[i])
    return cost
def generate_smart_square(visited,arr,idx):
    global ans
    if idx==9:
        if is_smart_square(arr):
            ans.append(arr.copy())
            return
    for i in range(1,10):
        if not visited[i]:
            visited[i]=True
            arr[idx]=i
            generate_smart_square(visited,arr,idx+1)
            visited[i]=False
    return
ans=[]
visited=[False]*10
arr=[0]*9
generate_smart_square(visited,arr,0)
t=int(input())
for _ in range(t):
    mat=[]
    for i in range(3):
        row = [int(i) for i in input().split()]
        mat+=row
    mincost=float('inf')
    for i in ans:
        mincost=min(mincost,compute_cost(i,mat))
    print(mincost)
