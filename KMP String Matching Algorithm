KMP String Matching Algorithm:

Given 2 strings A and B, find the number of occurrences of A in B as a substring.

Note: 
 Solve using the KMP string matching algorithm. Do not use an inbuilt library.  Input Format
The first line of input contains T - the number of test cases. It's followed by T lines. Each line contains 2 strings - A and B, separated by space.

Output Format
For each test case, print the number of occurrences of A in B, separated by a new line.

Constraints
1 <= T <= 2000
1 <= len(A), len(B) <= 10005
'a' <= A[i], B[i] <= 'z'

Example
Input
4
smart yekicmsmartplrplsmartrplplmrpsmartrpsmartwmrmsmartsmart
interviews interviewseiwcombvinterviewskrenlzp
ds dsdsajdsrjjdsjjj
algo yalgoalgoalgopalgoaxalgoasaxalgolalgoalgoalgo

Output
6
2
4
9

code:
import sys
input=sys.stdin.readline
def compute(pattern):
    lps=[0]*len(pattern)
    length=0
    i=1
    while i<len(pattern):
        if pattern[i]==pattern[length]:
            length+=1
            lps[i]=length
            i+=1
        else:
            if length!=0:
                length=lps[length-1]
            else:
                lps[i]=0
                i+=1
    return lps
def KMP(pattern,text):
    lps=compute(pattern)
    i=j=0
    count=0
    while i<len(text):
        if pattern[j]==text[i]:
            i+=1
            j+=1
        if j==len(pattern):
            count+=1
            j=lps[j-1]
        elif i<len(text) and pattern[j]!=text[i]:
            if j!=0:
                j=lps[j-1]
            else:
                i+=1
    return count
t=int(input())
res=[]
for _ in range(t):
    line=input().strip()
    if not line:
        line=input().strip()
    A,B=line.split()
    res.append(str(KMP(A,B)))
sys.stdout.write('\n'.join(res)+'\n')
