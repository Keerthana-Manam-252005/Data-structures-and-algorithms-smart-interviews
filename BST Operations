BST Operations:

You are given Q queries. Each query can be one of four types:
1 X: Insert an integer X into the binary search tree.2 X: Delete X from the tree and replace it with the smallest value from its right sub-tree.3 X: Print "Yes" if the value exists in the binary search tree, print "No" otherwise.4: Print the Preorder traversal of the binary search tree.Input Format
The first line of input contains T - the number of test cases.
The second line contains Q - the number of queries. The Q subsequent lines each contain 2 integers A - the type of query and X - the value to be processed in the query (except for query of type 4).

Output Format
For each test case, print the result, separated by a newline. For any query, if no result exists, print "null".

Constraints
1 <= T <= 100
1 <= Q <= 100
1 <= A <= 4
-105 <= X <= 105

Example
Input
2
8
1 4
1 2
1 6
1 8
2 2
3 3
4
3 1
7
1 5
1 7
1 3
4
3 3
2 3
3 3

Output
Case #1:
No
4 6 8
No
Case #2:
5 3 7
Yes
No

code:
class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
def insert(root,data):
    if not root:
        return Node(data)
    if data<root.data:
        root.left = insert(root.left,data)
    else:
        root.right = insert(root.right,data)
    return root
def search(root,data):
    if not root:
        return False
    if root.data==data:
        return True
    elif data<root.data:
        return search(root.left,data)
    else:
        return search(root.right,data)
def findMin(root):
    while root.left:
        root=root.left
    return root
def delete(root,data):
    if not root:
        return None
    if data<root.data:
        root.left = delete(root.left,data)
    elif data>root.data:
        root.right = delete(root.right,data)
    else:
        if not root.left:
            return root.right
        if not root.right:
            return root.left
        temp=findMin(root.right)
        root.data = temp.data
        root.right = delete(root.right,temp.data)
    return root
def preorder(root,res):
    if not root:
        return
    res.append(str(root.data))
    preorder(root.left,res)
    preorder(root.right,res)
t=int(input())
for i in range(t):
    print(f'Case #{i+1}:')
    q=int(input())
    root=None
    for _ in range(q):
        query=input().strip().split()
        if query[0]=='1':
            root = insert(root,int(query[1]))
        if query[0]=='2':
            root = delete(root,int(query[1]))
        if query[0]=='3':
            print("Yes" if search(root,int(query[1])) else "No")
        if query[0]=='4':
            ans=[]
            preorder(root,ans)
            print(' '.join(ans) if ans else 'null')
