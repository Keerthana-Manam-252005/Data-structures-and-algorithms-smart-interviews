Count Equal XOR Pairs:

You are given 2 arrays A and B of same size N. A pair is said to be a valid if and only if A[i] ^ A[j] == B[i] ^ B[j]. You have to count total number of valid pairs.

Input Format
First line of input contains T - number of test cases. First line of each test case contains N - size of the array. The second and third line of each test case contains N integers - elements of the array A and B.

Output Format
For each test case, print the count of number of valid pairs, separated by newline.

Constraints
30 points
1 <= N <= 103

70 points
1 <= N <= 105

General Constraints
1 <= T <= 100
0 <= A[i], B[i] <= 109

Example
Input
2
3
1 2 3
3 2 1
5
1 3 7 4 9
8 1 0 13 0

Output
1
3

Explanation

Test Case 1:
There is only one valid pair - (0, 2). This is because A[0] ^ A[2] == B[0] ^ B[2].

Test Case 2:
There are 3 valid pairs - (0, 4), (3, 4), (0, 3). For example (1, 9) is valid because A[0] ^ A[4] == B[0] ^ B[4] = 8 ^ 0 = 8.

code:
from collections import defaultdict
def count_equal_xor_pairs(A,B):
    freq = defaultdict(int)
    for a,b in zip(A,B):
        xor = a^b
        freq[xor]+=1
    count = 0
    for i in freq.values():
        count+= i*(i-1)//2
    return count
t = int(input())
for _ in range(t):
    N = int(input())
    A = list(map(int,input().split()))
    B = list(map(int,input().split()))
    print(count_equal_xor_pairs(A,B))
