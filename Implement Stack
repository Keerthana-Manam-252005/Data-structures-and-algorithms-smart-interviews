Implement Stack:

Implement the Stack data structure and perform push / pop operations.

Note: 
 Do not use any inbuilt functions / libraries for the Stack.  Input Format
The first line of input contains T - number of operations. It is followed by T lines, each line contains either "push x" or "pop".

Output Format
For each "pop" operation, print the popped element, separated by a newline. If the stack is empty, print "Empty".

Constraints
1 <= T <= 10000
-100 <= x <= 100

Example
Input
8
push 5
pop
pop
push 10
push -15
pop
push -10
pop

Output
5
Empty
-15
-10

code:
class Stack:
    def __init__(self):
        self.items=[]
    def push(self,x):
        self.items.append(x)
    def pop(self):
        if self.is_empty():
            return 'Empty'
        return self.items.pop()
    def is_empty(self):
        return len(self.items)==0
t=int(input())
stack=Stack()
for _ in range(t):
    operation=input().split()
    if operation[0]=='push':
        stack.push(int(operation[1]))
    elif operation[0]=='pop':
        print(stack.pop())
