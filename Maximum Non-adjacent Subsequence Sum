Maximum Non-adjacent Subsequence Sum:

Given an array of integers, find the maximum subsequence sum, such that no 2 elements of the subsequence are adjacent to each other. Note that you cannot select an empty subsequence.

Input Format
The first line of input contains T - number of test cases. It is followed by 2T lines. First line of each test case contains N - size of the array and the second line contains N integers - elements of the array.

Output Format
For each test case, print the maximum subsequence sum, separated by new line.

Constraints
1 <= T <= 1000
1 <= N <= 10000
-1000 <= ar[i] <= 1000

Example
Input
4
8
-24 28 28 55 -31 -27 -45 -24
11
40 5 39 45 31 -99 -44 73 -16 -31 27
7
57 18 -14 17 31 16 -16
2
26 61

Output
83
210
90
61


code:
def maximum_non_adjacent_sum(n,ar):
    if n==0:
        return 0
    if n==1:
        return ar[0]
    dp = [0]*n
    dp[0] = ar[0]
    dp[1] = max(ar[0],ar[1])
    if n<=2:
        return dp[n-1]
    for i in range(2,n):
        dp[i] = max(dp[i-1], dp[i-2]+ar[i], ar[i])
    return dp[-1]
t = int(input())
for _ in range(t):
    n = int(input())
    ar = list(map(int,input().split()))
    print(maximum_non_adjacent_sum(n,ar))
