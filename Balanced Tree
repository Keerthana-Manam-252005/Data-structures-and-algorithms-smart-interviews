Balanced Tree:

Given an array of unique elements, construct a Binary Search Tree and check if it is balanced. A tree is said to be balanced if, for every node, the difference between the height of its child nodes is not greater than 1.

Input Format
The first line of input contains T - the number of test cases. It's followed by 2T lines. The first line of each test case contains N - the number of nodes in the BST. The next line contains N unique integers - value of the nodes.

Output Format
For each test case, print "Yes" if the Binary Search Tree is balanced, "No" otherwise, separated by a newline.

Constraints
1 <= T <= 1000
1 <= N <= 1000
0 <= ar[i] <= 10000

Example
Input
3
5
1 2 3 4 5
5
3 2 4 1 5
7
4 5 15 0 1 7 17

Output
No
Yes
No

code:
class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
def insert(root,data):
    if not root:
        return Node(data)
    if data<root.data:
        root.left = insert(root.left,data)
    else:
        root.right = insert(root.right,data)
    return root
def BalancedTree(root):
    def dfs(node):
        if not node:
            return 0,True
        lh, is_leftBalanced = dfs(node.left)
        rh, is_rightBalanced = dfs(node.right)
        balanced = abs(lh-rh)<=1 and is_leftBalanced and is_rightBalanced
        return max(lh,rh)+1,balanced
    _, res=dfs(root)
    return res
t=int(input())
for _ in range(t):
    n=int(input())
    arr=list(map(int,input().split()))
    root=None
    for i in arr:
        root = insert(root,i)
    print("Yes" if BalancedTree(root) else "No")
