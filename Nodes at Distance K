Nodes at Distance K:

Given an array of unique elements, construct a Binary Search Tree and find the number of nodes at a distance K from the given source node S. Distance is defined as the number of edges between 2 nodes.

Input Format
The first line of input contains T - the number of test cases. It's followed by 2T lines. The first line of each test case contains N, S, K - the number of nodes in the BST, the source node, and the distance K. The next line contains N unique integers - the value of the nodes.

Output Format
For each test case, print the number of nodes in the Binary Search Tree which are K distance away from S, separated by newline.

Constraints
1 <= T <= 1000
1 <= N <= 1000
0 <= ar[i] <= 10000

Example
Input
3
5 3 2
1 2 3 4 5 
5 4 1
2 4 3 1 5 
7 5 2
4 5 15 0 1 7 17 

Output
2
3
3

code:
class Node:
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
def insert(root,data):
    if not root:
        return Node(data)
    if data<root.data:
        root.left = insert(root.left,data)
    else:
        root.right = insert(root.right,data)
    return root
def findPath(root,s):
    path=[]
    def dfs(node):
        if not node:
            return False
        path.append(node)
        if node.data==s:
            return True
        if dfs(node.left) or dfs(node.right):
            return True
        path.pop()
        return False
    dfs(root)
    return path
def countDist(src,k,block=None):
    if not src or k<0 or src==block:
        return 0
    if k==0:
        return 1
    return countDist(src.left,k-1,block) + countDist(src.right,k-1,block)
t=int(input())
for _ in range(t):
    n,s,k=list(map(int,input().split()))
    arr=list(map(int,input().split()))
    root=None
    for i in arr:
        root = insert(root,i)
    path=findPath(root,s)
    ans=0
    block=None
    for i in range(len(path)-1,-1,-1):
        node=path[i]
        dist=k-(len(path)-1-i)
        ans+=countDist(node,dist,block)
        block=node
    print(ans)
